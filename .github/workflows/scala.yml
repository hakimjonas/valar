name: Scala CI + SLSA Provenance

on:
  push:
    branches:
      - main
    tags:
      - 'v*' # Allows triggering provenance job
  pull_request:
    branches:
      - main

permissions:
  # Default read permission
  contents: read
  # Grant id-token write permission globally for the provenance job's OIDC
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      # Write permission needed for dependency submission and artifact upload
      contents: write
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
      artifact_name: ${{ steps.hash.outputs.artifact_name }}
      artifact_path: ${{ steps.hash.outputs.artifact_path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'sbt'

      - name: Set up sbt launcher
        uses: sbt/setup-sbt@v1

      - name: Check build.sbt and Environment (for debugging)
        run: |
          echo "--- build.sbt content ---"
          cat build.sbt || echo "build.sbt not found?"
          echo "--- Java version ---"
          java -version
          echo "--- sbt version info ---"
          sbt sbtVersion about || echo "sbt command failed"
          echo "--- Working Directory ---"
          pwd
          ls -la

      - name: Check format, lint, and run tests
        # This uses your project's aliases defined in build.sbt
        run: sbt check test

      - name: Upload dependency graph
        uses: scalacenter/sbt-dependency-submission@v3

      - name: Package artifact
        run: sbt clean package

      - name: Compute artifact digest (Correct SLSA Format) and Prepare Info
        id: hash
        run: |
          ARTIFACT_PATH=$(find target/scala-*/ -maxdepth 1 -type f -name "valar*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -n1)
          if [ -z "$ARTIFACT_PATH" ]; then
            echo "Warning: Specific artifact find failed, falling back to general search."
            ARTIFACT_PATH=$(find target -type f -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -n1)
          fi
          if [ ! -f "$ARTIFACT_PATH" ]; then
            echo "Error: Built artifact not found at $ARTIFACT_PATH!"
            exit 1
          fi
          ARTIFACT_NAME=$(basename "$ARTIFACT_PATH")
          SHA256_HEX=$(sha256sum "$ARTIFACT_PATH" | awk '{print $1}')
          # Correct format: base64 encode "sha256:<digest> <filename>"
          SUBJECT_LINE="sha256:$SHA256_HEX $ARTIFACT_NAME"
          BASE64_SUBJECTS=$(echo -n "$SUBJECT_LINE" | base64 -w0)
          echo "hashes=$BASE64_SUBJECTS" >> "$GITHUB_OUTPUT"
          echo "artifact_name=$ARTIFACT_NAME" >> "$GITHUB_OUTPUT"
          echo "artifact_path=$ARTIFACT_PATH" >> "$GITHUB_OUTPUT"
          echo "Artifact Path: $ARTIFACT_PATH"
          echo "Artifact Name: $ARTIFACT_NAME"

      - name: Upload artifact for release job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.hash.outputs.artifact_name }}
          path: ${{ steps.hash.outputs.artifact_path }}
          retention-days: 1

  provenance:
    # This job ONLY runs on tag pushes due to the 'if' condition
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    permissions:
      actions: read      # Read workflow info
      id-token: write    # OIDC for Sigstore
      contents: write    # Write provenance to release
    # Use the general v2 tag for the SLSA generator
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2
    with:
      # Use the correctly formatted hash from the build job
      base64-subjects: ${{ needs.build.outputs.hashes }}
      # Upload the generated provenance file to the release matching the tag
      upload-tag-name: ${{ github.ref_name }}
      # upload-assets defaults to true in the generator, usually no need to specify

  upload-release-artifact:
    # This job ONLY runs on tag pushes due to the 'if' condition
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build, provenance] # Ensure build is done and release likely exists
    runs-on: ubuntu-latest
    permissions:
      # Write permission needed to upload artifact to release
      contents: write

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact_name }}

      - name: Display structure after download
        run: ls -R

      - name: Upload artifact to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACT_NAME: ${{ needs.build.outputs.artifact_name }}
          TAG_NAME: ${{ github.ref_name }}
        run: |
          echo "Uploading $ARTIFACT_NAME to release $TAG_NAME"
          # Use clobber to overwrite asset if it already exists (e.g., from failed/retried run)
          gh release upload "$TAG_NAME" "$ARTIFACT_NAME" --clobber
