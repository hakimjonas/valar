name: Scala CI and GitHub Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*' # Trigger publish job on version tags
  pull_request:
    branches:
      - main

permissions:
  contents: read # Default permission
  id-token: write # Needed for GPG import action

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for actions/upload-artifact
    outputs:
      # Outputting specific filenames found
      jar_filename: ${{ steps.set_paths.outputs.jar_filename }}
      pom_filename: ${{ steps.set_paths.outputs.pom_filename }}
      scala_version_major: ${{ steps.set_paths.outputs.scala_version_major }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'sbt'

      - name: Set up sbt launcher
        uses: sbt/setup-sbt@v1

      - name: Check format, lint, and run tests
        run: sbt check test

      - name: Package artifact and generate POM
        run: |
          sbt clean package makePom

      # Determine artifact paths and names dynamically
      - name: Set artifact paths and names
        id: set_paths
        run: |
          SCALA_VERSION_DIR=$(find target -maxdepth 1 -type d -name "scala-*" | head -n1)
          if [ -z "$SCALA_VERSION_DIR" ]; then
            echo "Error: Scala version directory not found in target!"
            exit 1
          fi
          echo "Found Scala dir: $SCALA_VERSION_DIR"

          # Find JAR file
          JAR_PATH=$(find "$SCALA_VERSION_DIR" -maxdepth 1 -type f -name "valar*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -n1)
          if [ ! -f "$JAR_PATH" ]; then
            echo "Error: Main JAR artifact not found in $SCALA_VERSION_DIR!"
            exit 1
          fi
          echo "Found JAR: $JAR_PATH"
          JAR_FILENAME=$(basename "$JAR_PATH")
          echo "JAR Filename: $JAR_FILENAME"

          # Find POM file
          POM_PATH=$(find "$SCALA_VERSION_DIR" -maxdepth 1 -type f -name "valar*.pom" | head -n1)
          if [ ! -f "$POM_PATH" ]; then
            echo "Error: POM file not found in $SCALA_VERSION_DIR!"
            exit 1
          fi
          echo "Found POM: $POM_PATH"
          POM_FILENAME=$(basename "$POM_PATH")
          echo "POM Filename: $POM_FILENAME"

          # Get Scala major version
          SCALA_MAJOR_VERSION=$(basename "$SCALA_VERSION_DIR" | sed 's/scala-//')
          SCALA_MAJOR_VERSION=${SCALA_MAJOR_VERSION%%.*}

          # Set outputs
          echo "jar_filename=$JAR_FILENAME" >> "$GITHUB_OUTPUT"
          echo "pom_filename=$POM_FILENAME" >> "$GITHUB_OUTPUT"
          echo "scala_version_major=$SCALA_MAJOR_VERSION" >> "$GITHUB_OUTPUT"

          # Prepare staging directory for upload
          mkdir -p staging
          cp "$JAR_PATH" staging/
          cp "$POM_PATH" staging/
          echo "Contents of staging:"
          ls -l staging

      - name: Upload Jar and POM for publish job
        uses: actions/upload-artifact@v4
        with:
          # Name the artifact bundle clearly
          name: build-artifacts-scala-${{ steps.set_paths.outputs.scala_version_major }}
          path: staging/
          retention-days: 1

  publish:
    # Run only when a 'v*' tag is pushed
    if: startsWith(github.ref, 'refs/tags/')
    needs: build # Wait for build job to complete
    runs-on: ubuntu-latest
    permissions:
      # Need write access to contents to create releases and upload assets
      contents: write
      # Still need id-token for GPG action
      id-token: write

    steps:
      - name: Checkout repository (needed for gh cli context)
        uses: actions/checkout@v4

      - name: Set up JDK 17 (might not be needed, but harmless)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'sbt'

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.PGP_SECRET }}
          passphrase: ${{ secrets.PGP_PASSPHRASE }}

      - name: Check GPG Key ID
        run: |
          echo "GPG Key ID found: ${{ steps.import_gpg.outputs.keyid }}"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          # Match the upload name from build job
          name: build-artifacts-scala-${{ needs.build.outputs.scala_version_major }}
          # Download to a specific directory
          path: ./release-assets

      - name: Sign downloaded artifacts
        run: |
          echo "Signing artifacts in ./release-assets"
          cd ./release-assets
          ls -l
          # Use the specific filenames output by the build job
          JAR_FILE="${{ needs.build.outputs.jar_filename }}"
          POM_FILE="${{ needs.build.outputs.pom_filename }}"
          echo "Signing $JAR_FILE..."
          gpg --batch --yes --detach-sign --armor "$JAR_FILE"
          echo "Signing $POM_FILE..."
          gpg --batch --yes --detach-sign --armor "$POM_FILE"
          echo "Contents after signing:"
          ls -l
        env:
        # Pass passphrase directly to GPG if needed (should use agent from import_gpg ideally)
        # GPG_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }} # Usually not needed as import action sets up agent

      - name: Create GitHub Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # gh needs this implicitly
          TAG_NAME: ${{ github.ref_name }}
          JAR_FILE: ${{ needs.build.outputs.jar_filename }}
          POM_FILE: ${{ needs.build.outputs.pom_filename }}
        run: |
          echo "Creating release for tag $TAG_NAME"
          gh release create "$TAG_NAME" \
            --repo "$GITHUB_REPOSITORY" \
            --title "Release $TAG_NAME" \
            --generate-notes

          echo "Uploading assets..."
          cd ./release-assets
          gh release upload "$TAG_NAME" \
            "$JAR_FILE" \
            "$JAR_FILE.asc" \
            "$POM_FILE" \
            "$POM_FILE.asc" \
            --clobber # Overwrite assets if release/tag already exists